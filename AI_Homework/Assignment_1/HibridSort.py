# Group 21
# Edwin Cervantes, Sophia Nystrom, Vaibhav Vishnu Kovela
import time


def mergeSort(array):
    """
    This function is an recursive implementation of merge sort algorithm.
    array : This is an array to sort
    returns an array after sorting.
    """
    if len(array)>1:
        #splitting the array into two halves and calling mergeSort()
        mid = len(array)//2
        left = array[:mid]
        right = array[mid:]
        left = mergeSort(left)
        right = mergeSort(right)
        i = j = k = 0

        #rejoining the right and left arrays in ascending order
        while i < len(left) and j < len(right):
            if left[i] <= right[j]:
                array[k] = right[i]
                i += 1
            else:
                array[k] = right[j]
                j += 1
            k += 1
 
        while i < len(left):
            array[k] = left[i]
            i += 1
            k += 1
 
        while j < len(right):
            array[k] = right[j]
            j += 1
            k += 1
    return array

def quicksort(array):
    """
    An Algorithm to organize an array from low -> high via Quick Sort
    This utilizes recursion to sort each portion of the list

    array: The array to sort
    """
    less_than_pivot = []
    equal_to_pivot = []
    greater_than_pivot = []

    # If the array is of length 1 or less, just return, no sorting needed
    if len(array) > 1:
        # Use the first element of the array as the pivot
        pivot = array[0]
        for x in array:
            if x < pivot:
                less_than_pivot.append(x)
            elif x == pivot:
                equal_to_pivot.append(x)
            elif x > pivot:
                greater_than_pivot.append(x)
        return quicksort(less_than_pivot)+equal_to_pivot+quicksort(greater_than_pivot)  # Just use the + operator to join lists
    else:  
        return array

def bubblesort(array):
    """
    An Algorithm to organize an array from low -> high via Bubble Sort
    This algorithm compares two consecutive elements in the array, and if they are out of order,
    they get swapped, if not continue to the next element.

    array: The array to sort
    """
    # Get the length of the array
    l = len(array)
    for i in range(l-1):
        for j in range(0, l-i-1):
            # If true, swap the elements of the awway
            if array[j] > array[j + 1]:
                a = array[j]
                b = array[j + 1]
                array[j + 1] = a
                array[j] = b

    return array

def hybridSort(array, big, small, t):
    """
    This is a hibrid sorting function comprising of 3 different sorting algorithms
    Bubble Sort, Merge Sort and Quick Sort.

    array : Input array which needs to be sorted
    big : algorithm choice for bigger sort function. (1: Merge Sort; 2: Quick Sort)
    small : algorithm choice for smaller sort function
    t = Threshold input
    """

    if(big == 1):
        if(len(array)>t):
            #splitting the array into two halves
            mid = len(array)//2
            left = array[:mid]
            right = array[mid:]
            left = hybridSort(left,big,small,t)
            right = hybridSort(right,big,small,t)
            i=j=k=0

            # joining the arrays in ascending order
            while i < len(left) and j < len(right):
                if left[i] <= right[j]:
                    array[k] = left[i]
                    i += 1
                else:
                    array[k] = right[j]
                    j += 1
                k += 1
    
            while i < len(left):
                array[k] = left[i]
                i += 1
                k += 1
    
            while j < len(right):
                array[k] = right[j]
                j += 1
                k += 1

        # if the size of array is less than the threshold 
        else:
            array = bubblesort(array)

        return array
    
    if(big == 2):
        less_than_pivot = []
        equal_to_pivot = []
        greater_than_pivot = []
        if(len(array)>t):
            # Use the first element of the array as the pivot
            pivot = array[0]
            for x in array:
                if x < pivot:
                    less_than_pivot.append(x)
                elif x == pivot:
                    equal_to_pivot.append(x)
                elif x > pivot:
                    greater_than_pivot.append(x)
            less_than_pivot = hybridSort(less_than_pivot,big,small,t)
            greater_than_pivot = hybridSort(greater_than_pivot,big,small,t)
        
        else:

            array = bubblesort(array)
            return array
        
        return less_than_pivot + equal_to_pivot + greater_than_pivot
    
def hStime(array,big,small,t):
    """
    This function is to measure the execution time of the hybrid sort algorithm on a particular array
    """
    start =  time.time()
    print('Unsorted Array: \n')
    print(array,'\n \n')
    array = hybridSort(array,big,small,t)
    print('Sorted Array:\n')
    print(array,'\n\n')
    print('Time take to sort: ', time.time()-start , ' seconds ----->')


array0 = [5,6,4,2,6,2]

array1 = [3, 4, 54, -6, -2, 0, 8, 12, 36, 24, -42]

array2 = [113, 395, 313, 2, 194, 245, -4, -37, 17, 355, 362, 16, 311, 411, 183, 235, 380, -191, 33, 84, -173, -83, 250, 356, 
          -168, 304, 391, 281, 195, 94, 435, 93, 278, 21, 373, 221, 187, -58, 233, -19, -142, -84, 20, 227, -123, -133, 75, 55, 356, 168]

array3 = [359, 259, -808, 949, 294, -374, -392, 865, 164, -698, 680, -508, 751, 532, 521, 688, 935, -579, 551, -238, 280, -279, -451, -639,
           -700, -55, 528, -566, -414, 3, -172, -480, -828, 328, -145, 375, 288, -624, 721, -840, -945, 894, 836, -497, -968, -118, -121, 640, 185,
             -291, 818, -735, 134, 169, 929, 584, -197, -954, -598, 322, 397, -348, 293, -656, -992, 392, 890, 494, 208, 217, -299, -582, 936, 751, 11,
               -266, -401, 550, -361, 458, -811, -719, 601, -589, -939, -281, 162, 129, -159, 362, 229, -59, 564, 793, 139, -62, 236, 542, 387, -49, -469, 456, 
               787, 808, -686, -269, -528, -83, -407, 674, -94, 634, 393, 127, -310, -400, 690, 788, -752, 883, 1000, -404, 82, -183, 586, -734, 621, 772, -778,
                 -406, -401, -376, -131, -957, 194, 417, 602, -941, -67, 873, -304, 494, -872, -556, 481, -920, 708, 273, -933, 845]

array4 = [-515, 712, 73, 61, -551, 36, -809, -750, -509, 256, 933, 184, 787, -108, -694, -17, -667, -75, -505, -506, -922, 529, -5, 893, 706, -708, 847, -314,
           -477, -778, -789, 643, 806, 508, -986, -47, -677, -697, 383, -51, -550, 291, 650, 236, 85, 887, -123, 160, 502, -564, 777, -707, -185, -481, 450, -609,
             -66, 525, -58, 683, 612, 1000, 747, 633, 61, 312, 831, -850, 259, -167, 173, 314, 184, -620, 962, -50, 858, 45, -792, -584, -629, 353, 76, -569, -384,
               353, -645, -831, -12, -366, -639, -589, 633, 468, -222, -347, -309, 910, 303, 862, -343, 489, -770, 385, -430, -682, 994, -918, 708, 690, -653, 276, 
               -598, 236, -994, 254, 462, -487, 112, -519, -783, -745, 381, -197, -281, -828, 145, 900, 813, -189, -687, 678, 568, -609, 886, -457, -647, -48, 307,
                 281, -295, 552, 516, 170, 913, -93, 762, -618, -906, 270, -230, -673, 998, -565, -127, 753, 101, -393, -98, -217, -242, 725, 460, -672, -672, -732, 
                 312, 158, -461, -312, -798, -337, 258, 785, -356, 417, 943, 508, 764, 276, -557, -149, -65, 204, 170, 684, 259, -351, 313, 182, 298, 569, 719, -53,
                   847, 790, -131, 229, 754, 812, 125, -414, -796, -97, -611, -972, -632, -867, -388, -538, -94, 796, 318, 574, -470, 311, 817, 261, -679, -472, 181, 
                   870, -894, -820, 470, -362, -767, 622, -364, -933, 825, -43, 567, 800, 878, -915, -208, 447, -991, -356, -720, 204, 780, -312, 696, -763, 946, 311,
                     -300, -461, 849, 266, -44, 491, -844, 538, -140, 87, 822, 551, -203, -333, -621, -337, -557, 216, 521, -135, 605, 459, 359, -512, 448, 165, 605, 
                     -566, 206, 211, 23, -496, 647, 532, -582, 677, -369, 488, -239, -5, -483, -464, 170, 714, 159, 399, -285, -497, -745, -179, 971, 626, -534, -842,
                       -377, 231, -374, 507, -867, -49, -236, -806, 364, -104, -363, -956, 627, -558, 125, 721, 409, 870, 919, 189, 845, 854, -645, 656, 995, -406, 
                       -41, -239, 307, -725, 65, 154, 3, -734, 725, 518, 989, 234, -564, 408, 617, -839, -385, 97, -912, 995, 937, -303]

print(len(array4))
hStime(array4,1,1,50)


#-----------------------------------------------------------------------------------------------------
# Runs - 5
# Run 1 :
#       Array Size : 6
#       Compute time : 4.48e-5 seconds
#       Sorted? : Yes
#       Input : [5, 6, 4, 2, 6, 2] 
#       Output : [2, 2, 4, 5, 6, 6] 
#       Mode : Bubble Sort + Quick Sort
#
# Run 2 : 
#       Array Size : 11
#       Threshold : 5
#       Compute time : 6.48e-5 seconds
#       Sorted? : Yes
#       Input : [3, 4, 54, -6, -2, 0, 8, 12, 36, 24, -42] 
#       Output : [-42, -6, -2, 0, 3, 4, 8, 12, 24, 36, 54]
#       Mode : Bubble Sort + Merge Sort
#
# Run 3 : 
#       Array Size : 50
#       Threshold : 15
#       Compute time : 3.45e-3 seconds
#       Sorted? : Yes
#       Input : [113, 395, 313, 2, 194, 245, -4, -37, 17, 355, 362, 16, 311, 411, 183, 235, 380, -191, 33, 84, -173, -83, 250, 356, -168, 304, 391, 281, 195, 94, 
#                   435, 93, 278, 21, 373, 221, 187, -58, 233, -19, -142, -84, 20, 227, -123, -133, 75, 55, 356, 168] 
#       Output : [-191, -173, -168, -142, -133, -123, -84, -83, -58, -37, -19, -4, 2, 16, 17, 20, 21, 33, 55, 75, 84, 93, 94, 113, 168, 183, 187, 194, 195, 221, 227,
#                233, 235, 245, 250, 278, 281, 304, 311, 313, 355, 356, 356, 362, 373, 380, 391, 395, 411, 435] 
#       Mode : Bubble Sort + Quick Sort
#       
# Run 4:   
#       Array Size: 150
#       Threshold: 30
#       Compute time : 1.23e-2 seconds
#       Sorted? : Yes
#       Input : [359, 259, -808, 949, 294, -374, -392, 865, 164, -698, 680, -508, 751, 532, 521, 688, 935, -579, 551, -238, 280, -279, -451, -639, -700, -55, 
#                   528, -566, -414, 3, -172, -480, -828, 328, -145, 375, 288, -624, 721, -840, -945, 894, 836, -497, -968, -118, -121, 640, 185, -291, 818, -735, 
#                   134, 169, 929, 584, -197, -954, -598, 322, 397, -348, 293, -656, -992, 392, 890, 494, 208, 217, -299, -582, 936, 751, 11, -266, -401, 550, -361,
#                    458, -811, -719, 601, -589, -939, -281, 162, 129, -159, 362, 229, -59, 564, 793, 139, -62, 236, 542, 387, -49, -469, 456, 787, 808, -686, -269,
#                    -528, -83, -407, 674, -94, 634, 393, 127, -310, -400, 690, 788, -752, 883, 1000, -404, 82, -183, 586, -734, 621, 772, -778, -406, -401, -376, 
#                   -131, -957, 194, 417, 602, -941, -67, 873, -304, 494, -872, -556, 481, -920, 708, 273, -933, 845] 
#       Output: [-992, -968, -957, -954, -945, -941, -939, -933, -920, -872, -840, -828, -811, -808, -778, -752, -735, -734, -719, -700, -698, -686, -656, -639,
#                    -624, -598, -589, -582, -579, -566, -556, -528, -508, -497, -480, -469, -451, -414, -407, -406, -404, -401, -401, -400, -392, -376, -374, 
#                    -361, -348, -310, -304, -299, -291, -281, -279, -269, -266, -238, -197, -183, -172, -159, -145, -131, -121, -118, -94, -83, -67, -62, -59, 
#                    -55, -49, 3, 11, 82, 127, 129, 134, 139, 162, 164, 169, 185, 194, 208, 217, 229, 236, 259, 273, 280, 288, 293, 294, 322, 328, 359, 362, 375, 
#                     387, 392, 393, 397, 417, 456, 458, 481, 494, 494, 521, 528, 532, 542, 550, 551, 564, 584, 586, 601, 602, 621, 634, 640, 674, 680, 688, 690, 
#                     708, 721, 751, 751, 772, 787, 788, 793, 808, 818, 836, 845, 865, 873, 883, 890, 894, 929, 935, 936, 949, 1000] 
#       Mode : Bubble Sort + Quick Sort
# Run 5:   
#       Array Size: 350
#       Threshold: 60
#       Compute time : 0.27 seconds
#       Sorted? : Yes
#       Input : [-515, 712, 73, 61, -551, 36, -809, -750, -509, 256, 933, 184, 787, -108, -694, -17, -667, -75, -505, -506, -922, 529, -5, 893, 706, -708, 847, -314, 
#                   -477, -778, -789, 643, 806, 508, -986, -47, -677, -697, 383, -51, -550, 291, 650, 236, 85, 887, -123, 160, 502, -564, 777, -707, -185, -481, 450, 
#                   -609, -66, 525, -58, 683, 612, 1000, 747, 633, 61, 312, 831, -850, 259, -167, 173, 314, 184, -620, 962, -50, 858, 45, -792, -584, -629, 353, 76, 
#                   -569, -384, 353, -645, -831, -12, -366, -639, -589, 633, 468, -222, -347, -309, 910, 303, 862, -343, 489, -770, 385, -430, -682, 994, -918, 708, 
#                    690, -653, 276, -598, 236, -994, 254, 462, -487, 112, -519, -783, -745, 381, -197, -281, -828, 145, 900, 813, -189, -687, 678, 568, -609, 886, 
#                    -457, -647, -48, 307, 281, -295, 552, 516, 170, 913, -93, 762, -618, -906, 270, -230, -673, 998, -565, -127, 753, 101, -393, -98, -217, -242, 
#                    725, 460, -672, -672, -732, 312, 158, -461, -312, -798, -337, 258, 785, -356, 417, 943, 508, 764, 276, -557, -149, -65, 204, 170, 684, 259, 
#                   -351, 313, 182, 298, 569, 719, -53, 847, 790, -131, 229, 754, 812, 125, -414, -796, -97, -611, -972, -632, -867, -388, -538, -94, 796, 318, 574,
#                    -470, 311, 817, 261, -679, -472, 181, 870, -894, -820, 470, -362, -767, 622, -364, -933, 825, -43, 567, 800, 878, -915, -208, 447, -991, -356, 
#                   -720, 204, 780, -312, 696, -763, 946, 311, -300, -461, 849, 266, -44, 491, -844, 538, -140, 87, 822, 551, -203, -333, -621, -337, -557, 216, 521,
#                    -135, 605, 459, 359, -512, 448, 165, 605, -566, 206, 211, 23, -496, 647, 532, -582, 677, -369, 488, -239, -5, -483, -464, 170, 714, 159, 399, 
#                   -285, -497, -745, -179, 971, 626, -534, -842, -377, 231, -374, 507, -867, -49, -236, -806, 364, -104, -363, -956, 627, -558, 125, 721, 409, 870,
#                    919, 189, 845, 854, -645, 656, 995, -406, -41, -239, 307, -725, 65, 154, 3, -734, 725, 518, 989, 234, -564, 408, 617, -839, -385, 97, -912, 995, 
#                       937, -303] 
#       Output: [-994, -991, -986, -972, -956, -933, -922, -918, -915, -912, -906, -894, -867, -867, -850, -844, -842, -839, -831, -828, -820, -809, -806, -798, -796,
#                -792, -789, -783, -778, -770, -767, -763, -750, -745, -745, -734, -732, -725, -720, -708, -707, -697, -694, -687, -682, -679, -677, -673, -672, -672,
#                -667, -653, -647, -645, -645, -639, -632, -629, -621, -620, -618, -611, -609, -609, -598, -589, -584, -582, -569, -566, -565, -564, -564, -558, -557,
#                -557, -551, -550, -538, -534, -519, -515, -512, -509, -506, -505, -497, -496, -487, -483, -481, -477, -472, -470, -464, -461, -461, -457, -430, -414,
#                -406, -393, -388, -385, -384, -377, -374, -369, -366, -364, -363, -362, -356, -356, -351, -347, -343, -337, -337, -333, -314, -312, -312, -309, -303,
#                -300, -295, -285, -281, -242, -239, -239, -236, -230, -222, -217, -208, -203, -197, -189, -185, -179, -167, -149, -140, -135, -131, -127, -123, -108,
#                -104, -98, -97, -94, -93, -75, -66, -65, -58, -53, -51, -50, -49, -48, -47, -44, -43, -41, -17, -12, -5, -5, 3, 23, 36, 45, 61, 61, 65, 73, 76, 85, 87
#               , 97, 101, 112, 125, 125, 145, 154, 158, 159, 160, 165, 170, 170, 170, 173, 181, 182, 184, 184, 189, 204, 204, 206, 211, 216, 229, 231, 234, 236, 236,
#                254, 256, 258, 259, 259, 261, 266, 270, 276, 276, 281, 291, 298, 303, 307, 307, 311, 311, 312, 312, 313, 314, 318, 353, 353, 359, 364, 381, 383, 385,
#                399, 408, 409, 417, 447, 448, 450, 459, 460, 462, 468, 470, 488, 489, 491, 502, 507, 508, 508, 516, 518, 521, 525, 529, 532, 538, 551, 552, 567, 568,
#                569, 574, 605, 605, 612, 617, 622, 626, 627, 633, 633, 643, 647, 650, 656, 677, 678, 683, 684, 690, 696, 706, 708, 712, 714, 719, 721, 725, 725, 747,
#                753, 754, 762, 764, 777, 780, 785, 787, 790, 796, 800, 806, 812, 813, 817, 822, 825, 831, 845, 847, 847, 849, 854, 858, 862, 870, 870, 878, 886, 887,
#                893, 900, 910, 913, 919, 933, 937, 943, 946, 962, 971, 989, 994, 995, 995, 998, 1000] 
#       Mode : Bubble Sort + Merge Sort
#
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 
