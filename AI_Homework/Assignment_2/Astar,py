import heapq
import networkx as nx

# Create the weigh Graph representing the map
G = nx.Graph()

G.add_edge("Oradea", "Zerind", weight=71)
G.add_edge("Oradea", "Sibiu", weight=151)
G.add_edge("Zerind", "Arad", weight=75)
G.add_edge("Arad", "Sibiu", weight=140)
G.add_edge("Arad", "Timisoara", weight=118)
G.add_edge("Timisoara", "Lugoj", weight=111)
G.add_edge("Lugoj", "Mehadia", weight=70)
G.add_edge("Mehadia", "Drobeta", weight=75)
G.add_edge("Drobeta", "Craiova", weight=120)
G.add_edge("Craiova", "Rimnicu Vilcea", weight=146)
G.add_edge("Craiova", "Pitesti", weight=138)
G.add_edge("Rimnicu Vilcea", "Sibiu", weight=80)
G.add_edge("Pitesti", "Rimnicu Vilcea", weight=97)
G.add_edge("Sibiu", "Fagaras", weight=99)
G.add_edge("Fagaras", "Bucharest", weight=211)
G.add_edge("Bucharest", "Pitesti", weight=101)
G.add_edge("Bucharest", "Giurgiu", weight=90)
G.add_edge("Bucharest", "Urziceni", weight=85)
G.add_edge("Urziceni", "Hirsova", weight=98)
G.add_edge("Urziceni", "Vaslui", weight=142)
G.add_edge("Hirsova", "Eforie", weight=86)
G.add_edge("Vaslui", "Iasi", weight=92)
G.add_edge("Iasi", "Neamt", weight=87)

# Define heuristic values for each city (straight-line distance to Bucharest).
heuristic = {
    'Arad': 366,
    'Zerind': 374,
    'Oradea': 380,
    'Timisoara': 329,
    'Lugoj': 244,
    'Mehadia': 241,
    'Drobeta': 242,
    'Sibiu': 253,
    'Rimnicu Vilcea': 193,
    'Fagaras': 176,
    'Pitesti': 100,
    'Craiova': 160,
    'Bucharest': 0,
    'Giurgiu': 77,
    'Urziceni': 80,
    'Hirsova': 151,
    'Eforie': 161,
    'Vaslui': 199,
    'Iasi': 226,
    'Neamt': 234
}

#A* search function
def Astar(graph, start, goal):
    open_set = [(heuristic[start], start)]  # Priority queue of nodes to explore
    g_score = {city: float('inf') for city in graph}  # Cost from start to each node
    g_score[start] = 0

    while open_set:
        _, current = heapq.heappop(open_set)

        if current == goal:
            # Reconstruct and return the path if the goal is reached
            path = []
            while current:
                path.append(current)
                current = came_from.get(current)
            return path[::-1],g_score[goal]
        print(current)
        for i in range(len(graph[current])):
            neighbor = list(graph[current])
            cost = [G[current][x]['weight'] for x in neighbor]
            tentative_g_score = g_score[current] + cost[i]
            if tentative_g_score < g_score[neighbor[i]]:
                came_from[neighbor[i]] = current
                g_score[neighbor[i]] = tentative_g_score
                f_score = tentative_g_score + heuristic[neighbor[i]]
                heapq.heappush(open_set, (f_score, neighbor[i]))

    return None  # No path found

#Define lthe start and goal cities
start = 'Arad'
goal = 'Bucharest'

# Run A* search and print the result
came_from = {}
path, score = Astar(G, start, goal)
if path:
    print(f'Shortest path from {start} to {goal}:', score)
    print(' -> '.join(path))
else:
    print(f'No path found from {start} to {goal}.')
